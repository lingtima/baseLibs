<?php
/**
 * Author: lingtima@gmail.com
 * Time: 2018-03-28 17:15
 */

namespace Tools\Tests;

use Tools\Phone;

class PhoneTest extends TestCase
{
    public function phonesProvider()
    {
        return [
            [
                'correct' => [
                    '13001001569', '13168869381', '13264437751', '13329293056', '13433236257', '13551264511', '13674113305', '13765869904', '13896427363', '13999999999',
                    '14008536294', '14109258864', '14407845962', '14512351236', '14612351236', '14712351236', '14812351236', '14912351236',
                    '15012495522', '15150620768', '15251503556', '15351503556', '15451503556', '15551503556', '15652970168', '15751503556', '15810590414', '15962302363',
                    '16542055626', '16602055626',
                    '17000001111', '17181003986', '17381003986', '17521007364', '17630230941', '17721007364', '17821007364',
                    '17400007364', '17402007364', '17403007364', '17404007364', '17405007364', '17406007364', '17407007364', '17408007364', '17409007364',
                    '17401007364', '17401107364', '17401207364',
                    '18076755947', '18103519810', '18221602707', '18396958780', '18410329724', '18599830920', '18660664259', '18703519810', '18803519810', '18903519810',
                    '19899276826', '19999276826',
                ],
                'wrong' => [
                    '1234', 'asdf1', '1-239vmz', '-12o;;;;;we', '&%^&@*', '/^.*$/',
                    '21562348895', '41562348895', '01562348895', '015623488951',
                    '11562348895', '12562348895',
                    '14362348895', '14262348895', '14016234889', '14056234889', '14416234889',
                    '16162348895', '16262348895', '16362348895', '16762348895', '16862348895',
                    '17262348895', '17401634889',
                    '19162348895', '19662348895',
                ],
                'other' => [
                
                ],
            ],
        ];
    }
    
    /**
     * @dataProvider phonesProvider
     * @author lingtima@gmail.com
     */
    public function testIsPhone(...$args)
    {
        list($correctList, $wrongList, $otherList) = $args;
        $Phone = new Phone();
        $Phone->setPattern(2);
        $this->assertArrayHasKey(0, $correctList);
        foreach ($correctList as $k => $v) {
            $Phone->setPhone($v);
            $this->assertTrue($Phone->isPhone());
        }
        foreach ($wrongList as $k => $v) {
            $Phone->setPhone($v);
            $this->assertFalse($Phone->isPhone());
        }
    }
    
    public function operatorProvider()
    {
        return [
            [
                1 => [
                    '13426489537', '13526489537', '13926489537', '14401264895', '14726489537', '15026489537', '15226489537', '15926489537', '16526489537', '17826489537',
                    '18226489537', '18326489537', '18726489537', '19826489537',
                ],
                2 => [
                    '13026489537', '13126489537', '13226489537', '14001269537', '14526489537', '14626489537', '15526489537', '15626489537', '16626489537',
                    '17126489537', '17526489537', '17626489537', '18526489537', '18626489537',
                ],
                4 => [
                    '13326489537', '14101264895', '14926489537', '15326489537', '17326489537', '17400264895', '17726489537', '18026489537', '18126489537',
                    '18926489537', '19926489537',
                ],
                8 => [
                    '17026489537',
                ],
                16 => [
                    '15426489537',
                ],
                32 => [
                    '17406264895', '17401026489',
                ],
                1024 => ['11112341234'],
            ],
        ];
    }
    
    /**
     * @dataProvider operatorProvider
     * @author lingtima@gmail.com1
     */
    public function testGetOperator(...$args)
    {
        $Phone = new Phone();
        foreach ($args as $k => $v) {
            $operatorNum = pow(2, $k);
            $k === 6 AND $operatorNum = 1024;
            foreach ($v as $kk => $vv) {
                $this->assertEquals($operatorNum, $Phone->setPhone($vv)->getOperator(true));
            }
        }
    }
}